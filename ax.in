/**
 * Classe RendererImagem, junto com a classe ExemploImagem, mostra um exemplo de 
 * como trabalhar com imagens em OpenGL utilizando a API JOGL.
 * 
 * @author Marcelo Cohen, Isabel H. Manssour 
 * @version 1.0
 */


import java.awt.event.*; 

import javax.media.opengl.*;
import javax.media.opengl.glu.*;

import com.sun.opengl.util.*;

import java.nio.FloatBuffer;
import java.util.Iterator;
import java.util.LinkedList;

public class RendererImagem extends MouseAdapter implements GLEventListener, KeyListener
{
	// Atributos
	private GL gl;
	private GLU glu;
	private GLUT glut;
	private GLAutoDrawable glDrawable;
	private double fAspect;
	private Imagem imgs[], nova;
	private int sel;

	private int img[][];
	private LinkedList<Aresta> edges;
	private int [][]GV;
	private int [][]GH;
	private boolean temAresta[][];
	/**
	 * Construtor da classe RendererImagem que recebe um array com as imagens
	 */
	public RendererImagem(Imagem imgs[])
	{
		// Inicializa o valor para correï¿½Ã£o de aspecto   
		fAspect = 1;

		// Imagem carregada do arquivo
		this.imgs = imgs;
		nova = null;
		sel = 0;	// selecionada = primeira imagem
	}

	/**
	 * Mï¿½todo definido na interface GLEventListener e chamado pelo objeto no qual serï¿½ feito o desenho
	 * logo apï¿½s a inicializaï¿½ï¿½o do contexto OpenGL. 
	 */    
	public void init(GLAutoDrawable drawable)
	{
		glDrawable = drawable;
		gl = drawable.getGL();
		// glu = drawable.getGLU();       
		glu = new GLU();
		glut = new GLUT();

		drawable.setGL(new DebugGL(gl));        

		gl.glClearColor(1.0f, 1.0f, 1.0f, 1.0f);

		// Define a janela de visualizaï¿½Ã£o 2D
		gl.glMatrixMode(GL.GL_PROJECTION);
		glu.gluOrtho2D(0,1,0,1);
		gl.glMatrixMode(GL.GL_MODELVIEW);
	}

	/**
	 * Método definido na interface GLEventListener e chamado pelo objeto no qual serï¿½ feito o desenho
	 * para comeï¿½ar a fazer o desenho OpenGL pelo cliente.
	 */  
	public void display(GLAutoDrawable drawable)
	{
		gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT );
		gl.glLoadIdentity();    

		gl.glColor3f(0.0f, 0.0f, 1.0f);

		// Desenha a imagem original
		gl.glRasterPos2f(0,0);
		gl.glDrawPixels(imgs[sel].getWidth(), imgs[sel].getHeight(),
				GL.GL_BGR, GL.GL_UNSIGNED_BYTE, imgs[sel].getData());

		// Desenha a imagem resultante
		if(nova!=null) {
			gl.glRasterPos2f(0.5f,0);
			gl.glDrawPixels(nova.getWidth(), nova.getHeight(),
					GL.GL_BGR, GL.GL_UNSIGNED_BYTE, nova.getData());
		}
	}

	/**
	 * Método definido na interface GLEventListener e chamado pelo objeto no qual serÃ¡ feito o desenho
	 * depois que a janela foi redimensionada.
	 */  
	public void reshape(GLAutoDrawable drawable, int x, int y, int width, int height)
	{
		gl.glViewport(0, 0, width, height);
		fAspect = (float)width/(float)height;      
	}

	/**
	 * Método definido na interface GLEventListener e chamado pelo objeto no qual serÃ¡ feito o desenho
	 * quando o modo de exibiï¿½Ã£o ou o dispositivo de exibiï¿½Ã£o associado foi alterado.
	 */  
	public void displayChanged(GLAutoDrawable drawable, boolean modeChanged, boolean deviceChanged) { }

	/**
	 * Método da classe MouseAdapter que estÃ¡ sendo sobrescrito para gerenciar os 
	 * eventos de clique de mouse, de maneira que seja feito zoom in e zoom out.
	 */  
	public void mouseClicked(MouseEvent e)
	{
		if (e.getButton() == MouseEvent.BUTTON1) // botÃ£o 1
		{ }
		if (e.getButton() == MouseEvent.BUTTON3) // botÃ£o 2
		{ }
		glDrawable.display();
	}

	/**
	 * Método definido na interface KeyListener que estÃ¡ sendo implementado para, 
	 * de acordo com as teclas pressionadas, permitir mover a posiï¿½Ã£o do observador
	 * virtual.
	 */        
	public void keyPressed(KeyEvent e)
	{
		// F1 para prÃ³xima imagem
		if(e.getKeyCode()==KeyEvent.VK_F1)
		{
			if(++sel>imgs.length-1) sel=imgs.length-1;
		}
		// F2 para imagem anterior
		else if(e.getKeyCode()==KeyEvent.VK_F2)
		{
			if(--sel<0) sel = 0;
		}

		// Cria a imagem resultante
		nova = (Imagem) imgs[sel].clone();

		switch (e.getKeyCode())
		{
		case KeyEvent.VK_1:		// Para exibir a imagem "original": nÃ£o faz nada
			System.out.println("Negative");
			negative();
			break;
		case KeyEvent.VK_2:		// Para converter a imagem para tons de cinza
			System.out.println("Grayscale");
			convertToGrayScale();
			break;     
		case KeyEvent.VK_3:		// Para converter a imagem para preto e branco  
			System.out.println("B&W");
			convertToGrayScale();
			convertToBlackAndWhite();
			break;
		case KeyEvent.VK_4:		// Para aplicar um filtro passa-alta (realce de bordas)
			System.out.println("High pass");
			convertToGrayScale();
			highPass();
			break;
		
		case KeyEvent.VK_ESCAPE:	System.exit(0);
		break;
		}  
		glDrawable.display();
	}

	/**
	 * Método definido na interface KeyListener.
	 */      
	public void keyTyped(KeyEvent e) { }

	/**
	 * Método definido na interface KeyListener.
	 */       
	public void keyReleased(KeyEvent e) { }

	/**
	 * Método que converte a imagem para tons de cinza.
	 */       
	public void convertToGrayScale() 
	{ 
		// Tarefa 1:
		//		Gerar uma imagem em tons de cinza 
		//		Use os métodos 
		//			getPixel/getR/getG/getB e setPixel da classe Imagem
		// 		Altere apenas o atributo nova.
		//     Experimente executar e testar nas imagens disponibilizadas.

		int R=0, G=0, B=0;
		int cinza = 0;

		for (int i = 0; i < nova.getWidth(); i++) {
			for (int j = 0; j < nova.getHeight(); j++) {
				R = nova.getR(i, j);
				G = nova.getG(i, j);
				B = nova.getB(i, j);

				cinza = (R+G+B)/3;

				nova.setPixel(i, j, cinza, cinza, cinza);
			}
		}

		System.out.println(nova.getWidth()+" "+nova.getHeight());

	}    

	/**
	 * Método que converte a imagem de tons de cinza para preto e branco.
	 */       
	public void convertToBlackAndWhite() 
	{ 
		// Tarefa 2:
		//		Uma forma de segmentar/transformar as imagens para P&B é a
		//		limiarizaïção (thresholding). Se o valor do pixel for menor que o valor do
		//		limiar a cor deve ser preta, caso contrário deve ser branca.
		//		Implemente essa técnica e varie o valor do limiar para 
		//		números pequenos como 10 ou 15 e números grandes como 100 e 150.
		//		Altere apenas o atributo nova.
		//      Experimente executar e testar nas imagens disponibilizadas.

		// Tarefa 3:
		//		Agora apenas mude o valor do limiar da tarefa 2 para um número 
		//		que represente a média entre os valores de densidade encontrados 
		//		na imagem. Altere apenas o atributo nova.
		//      Experimente executar e testar nas imagens disponibilizadas.		

		int media = 0;
		int wid = nova.getWidth();
		int hei = nova.getHeight();

		for (int i = 0; i < wid; i++) {
			for (int j = 0; j < hei; j++) {
				media += nova.getB(i, j);
			}
		}

		media = media /(wid*hei);

		for (int i = 0; i < wid; i++) {
			for (int j = 0; j < hei; j++) {
				if(nova.getB(i, j) > media){
					nova.setPixel(i, j, 0, 0, 0);

				}else{
					nova.setPixel(i, j, 255, 255, 255);
				}
			}
		}
	}

	public void negative(){
		int actR = 0,actG = 0,actB = 0;
		int newR, newG, newB;

		int wid = nova.getWidth();
		int hei = nova.getHeight();

		for (int i = 0; i < wid; i++) {
			for (int j = 0; j < hei; j++) {
				actR = nova.getR(i, j);
				actG = nova.getG(i, j);
				actB = nova.getB(i, j);

				newR = 255 - actR;
				newG = 255 - actG;
				newB = 255 - actB;

				nova.setPixel(i, j, newR, newG, newB);
			}
		}
	}

	/**
	 * Método para aplicar um kernel (filtro) qualquer a uma imagem
	 * Deve receber uma matrix 3x3, e aplica este Ã  imagem original,
	 * alterando a imagem "nova"
	 */
	public void applyKernel(float [][]vert, float[][] hor){
		int count =0;
		int wid = nova.getWidth();
		int hei = nova.getHeight();
		this.GV = new int[wid][hei];
		this.GH = new int[wid][hei];
		double [][]G = new double[wid][hei];
		double Gb = 0;
		double alfa = 4.7;
		double T = 0;


		for(int x=0; x<wid-2; x++){
			for(int y=0; y<hei-2; y++){

				int somav = 0;
				int somah = 0;

				for(int i=0; i<3; i++){
					for(int j=0; j<3; j++){
						int p = nova.getR(x+i,y+j);

						somav += p * vert[i][j];
						somah += p * hor[i][j]; 


						if(count<20){
							System.out.println(p +" "+ vert[i][j]);

							if(i+j == 4){
								System.out.println(somav);
								System.out.println();
							}else{
								System.out.println("parcial: "+somav);
							}
						}

					}
				}
				count++;

				this.GV[x+1][y+1] =(int) somav;

				this.GH[x+1][y+1] =(int) somah;

				double r = (somah * somah) + (somav * somav);
				r = Math.sqrt(r);
				G[x+1][y+1] = r;
				Gb += r;
			}
		}

		System.out.println("G "+Gb);
		Gb = Gb/(wid*hei);
		System.out.println("Gb "+ Gb);

		T = alfa*Gb;

		for (int i = 0; i < wid; i++) {
			for (int j = 0; j < hei; j++) {
				if(G[i][j] >= T){
					nova.setPixel(i, j, 255, 255, 255);
				}else{
					nova.setPixel(i, j, 0, 0, 0);
				}

			}
		}
	}

	public void thinning(){
		
		LinkedList<Coord> toChange = new LinkedList<Coord>();
		boolean mudou;
		int T = 0;
		int N = 0;

		do{
			mudou = false;

			for (int i = 1; i < img.length-1; i++) {
				for (int j = 1; j < img[i].length-1; j++) {
					if(img[i][j] == 1){
						N = getN(i,j);
						T = getT(i,j);

						if(T == 1 && N >= 2 && N <= 6 && (img[i-1][j]*img[i][j+1]*img[i+1][j])==0 && (img[i][j+1]*img[i+1][j]*img[i][j-1])==0){
							toChange.add(new Coord(i,j));
							
							mudou = true;
						}
					}
				}
			}
			
			for(Coord c: toChange){
				img[c.x][c.y] = 0;
			}
			toChange.clear();
			
			for (int i = 1; i < img.length-1; i++) {
				for (int j = 1; j < img[i].length-1; j++) {
					if(img[i][j] == 1){
						N = getN(i,j);
						T = getT(i,j);

						if(T == 1 && N >= 2 && N <= 6 && (img[i-1][j]*img[i][j+1]*img[i][j-1])==0 && (img[i-1][j]*img[i+1][j]*img[i][j-1])==0){
							toChange.add(new Coord(i,j));
							
							mudou = true;
						}
					}
				}
			}
			for(Coord c: toChange){
				img[c.x][c.y] = 0;
			}
			toChange.clear();

		}while(mudou);

		for (int i = 0; i < img.length; i++) {
			for (int j = 0; j < img[i].length; j++) {
				if(img[i][j] == 1){
					nova.setPixel(i, j, 255,255,255);
				}else{
					nova.setPixel(i, j, 0, 0, 0);
				}
			}
		}
	}

	int getN(int i, int j){
		return img[i-1][j-1]+img[i-1][j]+img[i-1][j+1]+img[i][j+1]+img[i+1][j+1]+img[i+1][j]+img[i+1][j-1]+img[i][j-1];
	}

	int getT(int i, int j){
		int count = 0;

		if(img[i-1][j] == 0 && img[i-1][j+1] == 1){
			count++;
		}

		if(img[i-1][j+1] == 0 && img[i][j+1] == 1){
			count++;
		}

		if(img[i][j+1] == 0 && img[i+1][j+1] == 1){
			count++;
		}

		if(img[i+1][j+1] == 0 && img[i+1][j] == 1){
			count++;
		}

		if(img[i+1][j] == 0 && img[i+1][j-1] == 1){
			count++;
		}

		if(img[i+1][j-1] == 0 && img[i][j-1] == 1){
			count++;
		}

		if(img[i][j-1] == 0 && img[i-1][j-1] == 1){
			count++;
		}

		if(img[i-1][j-1] == 0 && img[i-1][j] == 1){
			count++;
		}

		return count;
	}

	void atualizarImgPB(){
		for (int i = 0; i < img.length; i++) {
			for (int j = 0; j < img[i].length; j++) {
				if(nova.getB(i, j) == 255){
					img[i][j] = 1;
				}else{
					img[i][j] = 0;
				}
			}
		}
	}
	
	public void identificarArestas(){
		int wid = nova.getWidth();
		int hei = nova.getHeight();
		
		temAresta = new boolean[wid][hei];
		this.edges = new LinkedList<Aresta>();
		
		for (int i = 0; i < img.length; i++) {
			for (int j = 0; j < img[i].length; j++) {
				if(img[i][j] == 1 && !temAresta[i][j]){
					Aresta e = new Aresta(new Coord(i,j));
					temAresta[i][j] = true;
					this.edges.add(e);
					verificarViz(wid, hei, i, j, img);
				}
			}
		}
		
		for (Aresta e : edges) {
			e.imprimirPts();
		}
		System.out.println("\narestas: "+edges.size());
		
	}
	
	public void verificarViz(int wid, int hei,int x, int y, int[][]imag){
		if(x > 0 && !temAresta[x-1][y] && imag[x-1][y] == 1){
			edges.getLast().adicionar(new Coord(x-1,y));
			temAresta[x-1][y] = true;
			verificarViz(wid, hei, x-1, y,imag);
		}
		
		if(x < wid-1 && !temAresta[x+1][y] && imag[x+1][y] == 1){
			edges.getLast().adicionar(new Coord(x+1,y));
			temAresta[x+1][y] = true;
			verificarViz(wid, hei, x+1, y,imag);
		}
		
		if(y > 0 && !temAresta[x][y-1] && imag[x][y-1] == 1){
			edges.getLast().adicionar(new Coord(x,y-1));
			temAresta[x][y-1] = true;
			verificarViz(wid, hei, x, y-1,imag);
		}
		
		if(y < hei-1 && !temAresta[x][y+1] && imag[x][y+1] == 1){
			edges.getLast().adicionar(new Coord(x,y+1));
			temAresta[x][y+1] = true;
			verificarViz(wid, hei, x, y+1,imag);
		}
		
		if(x > 0 && y > 0 && !temAresta[x-1][y-1] && imag[x-1][y-1] == 1){
			edges.getLast().adicionar(new Coord(x-1,y-1));
			temAresta[x-1][y-1] = true;
			verificarViz(wid, hei, x-1, y-1,imag);
		}
		
		if(x < wid-1 && y > 0 && !temAresta[x+1][y-1] && imag[x+1][y-1] == 1){
			edges.getLast().adicionar(new Coord(x+1,y-1));
			temAresta[x+1][y-1] = true;
			verificarViz(wid, hei, x+1, y-1,imag);
		}
		
		if(x < wid-1 && y < hei-1 && !temAresta[x+1][y+1] && imag[x+1][y+1] == 1){
			edges.getLast().adicionar(new Coord(x+1,y+1));
			temAresta[x+1][y+1] = true;
			verificarViz(wid, hei, x+1, y+1,imag);
		}
		
		if(x > 0 && y < hei-1 && !temAresta[x-1][y+1] && imag[x-1][y+1] == 1){
			edges.getLast().adicionar(new Coord(x-1,y+1));
			temAresta[x-1][y+1] = true;
			verificarViz(wid, hei, x-1, y+1,imag);
		}
	}
	
	public void highPass()
	{
		// Tarefa 4:
		//		Implemente um filtro passa-alta (realce de bordas). 
		//		Defina uma matriz 3x3 com os valores corretos e chame o método applyKernel.
		//		ex: float[][] matriz = { 0, 0, 0 } , { 0 , 0, 0 } , { 0, 0 ,0 }};
		//		    applyKernel(matriz);
		int wid = nova.getWidth();
		int hei = nova.getHeight();
		img = new int[wid][hei];


		float[][] vertical = {{1,2,1}, {0,0,0}, {-1,-2,-1}};
		float[][] horizontal = {{-1,0,1}, {-2,0,2}, {-1,0,1}};

		applyKernel(vertical, horizontal);
		atualizarImgPB();
		
		thinning();
		
		identificarArestas();

	}

	
}

class Coord{
	public int x;
	public int y;
	
	public Coord(int x, int y){
		this.x = x;
		this.y = y;
	}
}

class Aresta{
	
	private LinkedList<Coord> pontos = new LinkedList<Coord>();
	private int tamanho;
	
	public Aresta(Coord init){
		this.pontos.add(init);
		this.setTamanho(1);
	}
	
	public void adicionar(Coord x){
		this.pontos.add(x);
		setTamanho(1);
	}
	
	void imprimirPts(){
		for (Coord p : pontos) {
			System.out.print("x: "+p.x+" y: "+p.y+" /");
		}
		System.out.println();
	}
	
	public boolean pertence(){
		
		
		return false;
	}
	public int getTamanho() {
		return tamanho;
	}

	public void setTamanho(int tamanho) {
		this.tamanho += tamanho;
	}
	
	
}
